plugins {
    id 'com.github.johnrengelman.shadow'
    id 'beedev.java'
    id 'beedev.minecraft'
    id 'beedev.platform'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}


publishMods {
    github {
        accessToken = System.getenv("GITHUB_TOKEN") ?: ""
        repository = System.getenv("GITHUB_REPOSITORY") ?: ""
        commitish = System.getenv("GIT_COMMIT") ?: ""
        tagName = "release/${project.version}"
    }
}

tasks.named('publishGithub') {
    dependsOn(
            project(":common").tasks.remapJar,
            project(":neoforge").tasks.remapJar,
    )

    // we need to do this here so that it waits until Forge is already configured
    // otherwise tasks.remapJar doesn't exist yet
    publishMods {
        github {
            additionalFiles.from(
                    project(":common").tasks.remapJar.archiveFile,
                    project(":neoforge").tasks.remapJar.archiveFile,
            )
        }
    }
}